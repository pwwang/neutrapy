{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A CLI tool to build desktop applications with Neutralinojs and Python as backend Thanks to Neutralinojs 's extension system, which allows us to spawn a process and communicate with it. neutrapy maintains both the app and the extension written in Python. Also thanks to PyOxidizer that compiles Python code to into binary so that it can be shipped with the app. Example The example is generated by neutrapy create -n example . It isn't the same as the offical example, called litePy , from Neutralinojs. The official one saves the code into a temporary file and executes it by spawn a python process, which is just a one-way communication. neutrapy uses websocket_client for the extension to communicate with the Neutralino server. This enables a bi-directional communication between the frontend and backend. Installation $ pip install -U neutrapy # Installs the latest version of neutrapy Documentation https://pwwang.github.io/neutrapy/ Credits neutralinojs PyOxidizer neutralino_python_extension_sample","title":"Home"},{"location":"#example","text":"The example is generated by neutrapy create -n example . It isn't the same as the offical example, called litePy , from Neutralinojs. The official one saves the code into a temporary file and executes it by spawn a python process, which is just a one-way communication. neutrapy uses websocket_client for the extension to communicate with the Neutralino server. This enables a bi-directional communication between the frontend and backend.","title":"Example"},{"location":"#installation","text":"$ pip install -U neutrapy # Installs the latest version of neutrapy","title":"Installation"},{"location":"#documentation","text":"https://pwwang.github.io/neutrapy/","title":"Documentation"},{"location":"#credits","text":"neutralinojs PyOxidizer neutralino_python_extension_sample","title":"Credits"},{"location":"CHANGELOG/","text":"","title":"CHANGELOG"},{"location":"app-to-extension/","text":"You may check out resources/js/main.js from the app created by neutrapy create . Basically: await Neutralino . extensions . dispatch ( extensionId , event , data ); See: https://neutralino.js.org/docs/how-to/extensions-overview#sending-a-message-from-app-to-an-extension","title":"App-to-extension communication"},{"location":"cli/","text":"The CLI tool Checking the requirements $ neutrapy check # Checks if neu-cli, poetry and pyoxidizer are installed $ neutrapy check --python /path/to/python # Specify the path to python used in the project Creating a new project $ neutrapy create --help DESCRIPTION: Create a new project. USAGE: neutrapy create --name STR [ OPTIONS ] REQUIRED OPTIONS: -n, --name <STR> - The name of the project. It 's used to create a directory under current directory, and also the project name in neutralinojs.config.json and pyproject.toml. OPTIONAL OPTIONS: --python <STR> - The path to the python executable. Default: python -v, --version <STR> - The version of the project. It' s used in neutralinojs.config.json and pyproject.toml. Default: 0 .1.0 -d, --description <STR> - The description of the project. Default: '' -l, --license <STR> - The license of the project. Default: MIT -t, --template <STR> - The template used to create the project. Default: default --force [ BOOL ] - Remove existing project directory and then create. Default: False --ext-loglevel <STR> - Default logging level for the python extension. Default: INFO -h, --help - Print help information for this command This command will: Remove the existing project directory if --force is passed Run neu create <name> to create a neutralinojs project (A directory with <name> will be created under current directory) Copy the template files to the project directory and replace the placeholders with the values passed to the command Create neutrapy.toml in the project directory with given configurations from the template and the values passed to the command Syncronize the neutrapy.toml to other configurations files, including: poetry.lock and requirements.txt (for PyOxidizer to build the python extension) pyoxidizer.bzl for PyOxidizer to build the python extension Syncronizing the configurations $ neutrapy sync # Syncronize the neutrapy.toml to other configurations files These configurations include: pyproject.toml (items under poetry section in neutrapy.toml will be synced to tool.poetry section in pyproject.toml ) neutralinojs.config.json (items under neutralino section in neutrapy.toml will be synced to neutralino section in neutralinojs.config.json ) poetry.lock and requirements.txt (for PyOxidizer to build the python extension) pyoxidizer.bzl for PyOxidizer to build the python extension Note The best practice is to always modify neutrapy.toml and then run neutrapy sync to syncronize the configurations, except pyoxidizer.bzl which is generated by PyOxidizer. Warning To manage the python dependences for the python extension, do NOT use poetry add and poetry remove . Instead, use neutrapy add and neutrapy remove to add and remove python packages, so that they will be sync'ed to all the configuration files. If you accidentally use poetry add and poetry remove , neutrapy sync will lose those dependencies. Adding/Removing python packages $ neutrapy add --help DESCRIPTION: Add a python dependency. USAGE: neutrapy add - LIST [ OPTIONS ] REQUIRED OPTIONS: POSITIONAL <LIST> - The names of the dependencies. OPTIONAL OPTIONS: -D, --dev [ BOOL ] - Add the dependencies to dev-dependencies. Default: False -E, --extras <LIST> - Extras to activate for the dependency. Default: [] --optional [ BOOL ] - Add the dependencies as optional. Default: False --pyver <STR> - Python version for which the dependency must be installed. Default: '' --platform <STR> - Platform for which the dependency must be installed. Default: '' --source <STR> - Name of the source to use for the dependency. Default: '' --allow-prereleases [ BOOL ] - Allow prereleases. Default: False --lock [ BOOL ] - Do not perform operations ( only update the lockfile ) . Default: False -h, --help - Print help information for this command $ neutrapy remove --help DESCRIPTION: Remove a python dependency. USAGE: neutrapy remove - LIST [OPTIONS] REQUIRED OPTIONS: POSITIONAL <LIST> - The names of the dependencies. OPTIONAL OPTIONS: -D, --dev [BOOL] - Remove the dependencies from dev-dependencies. Default: False -h, --help - Print help information for this command Note --pyver will be passed as --python to poetry add command. Running the application $ neutrapy run --help DESCRIPTION: Run current project. See also: https://neutralino.js.org/docs/cli/neu-cli/#neu-run USAGE: neutrapy run [ OPTIONS ] OPTIONAL OPTIONS: --disable-auto-reload [ BOOL ] - Disables the auto-reloading feature. Default: False --frontend-lib-dev [ BOOL ] - Enables both frontend library 's development environment and Neutralinojs' s development evironment at the same time. Default: False -- <LIST> - Sets additional CLI arguments for the Neutralinojs application process. Default: [] -h, --help - Print help information for this command This will simply call neu run to run the application. Building the application $ neutrapy build --help DESCRIPTION: Build the project. USAGE: neutrapy build [ OPTIONS ] OPTIONAL OPTIONS: --force [ BOOL ] - Do not check if we need to do ` neutrapy sync ` before building. Default: False -h, --help - Print help information for this command This will: Check if neutrapy sync is needed (if neutrapy.toml is modified since last neutrapy sync ) if --force is not passed Build the python extension using PyOxidizer Modify the neutralinojs.config.json to use the built python extension Build the Neutralinojs application using neu build Restore the neutralinojs.config.json Copy the built python extension to the app directory ( ./dist ) under backend Copy the neutrapy.toml to the app directory for the backend to use","title":"The CLI tool"},{"location":"cli/#the-cli-tool","text":"","title":"The CLI tool"},{"location":"cli/#checking-the-requirements","text":"$ neutrapy check # Checks if neu-cli, poetry and pyoxidizer are installed $ neutrapy check --python /path/to/python # Specify the path to python used in the project","title":"Checking the requirements"},{"location":"cli/#creating-a-new-project","text":"$ neutrapy create --help DESCRIPTION: Create a new project. USAGE: neutrapy create --name STR [ OPTIONS ] REQUIRED OPTIONS: -n, --name <STR> - The name of the project. It 's used to create a directory under current directory, and also the project name in neutralinojs.config.json and pyproject.toml. OPTIONAL OPTIONS: --python <STR> - The path to the python executable. Default: python -v, --version <STR> - The version of the project. It' s used in neutralinojs.config.json and pyproject.toml. Default: 0 .1.0 -d, --description <STR> - The description of the project. Default: '' -l, --license <STR> - The license of the project. Default: MIT -t, --template <STR> - The template used to create the project. Default: default --force [ BOOL ] - Remove existing project directory and then create. Default: False --ext-loglevel <STR> - Default logging level for the python extension. Default: INFO -h, --help - Print help information for this command This command will: Remove the existing project directory if --force is passed Run neu create <name> to create a neutralinojs project (A directory with <name> will be created under current directory) Copy the template files to the project directory and replace the placeholders with the values passed to the command Create neutrapy.toml in the project directory with given configurations from the template and the values passed to the command Syncronize the neutrapy.toml to other configurations files, including: poetry.lock and requirements.txt (for PyOxidizer to build the python extension) pyoxidizer.bzl for PyOxidizer to build the python extension","title":"Creating a new project"},{"location":"cli/#syncronizing-the-configurations","text":"$ neutrapy sync # Syncronize the neutrapy.toml to other configurations files These configurations include: pyproject.toml (items under poetry section in neutrapy.toml will be synced to tool.poetry section in pyproject.toml ) neutralinojs.config.json (items under neutralino section in neutrapy.toml will be synced to neutralino section in neutralinojs.config.json ) poetry.lock and requirements.txt (for PyOxidizer to build the python extension) pyoxidizer.bzl for PyOxidizer to build the python extension Note The best practice is to always modify neutrapy.toml and then run neutrapy sync to syncronize the configurations, except pyoxidizer.bzl which is generated by PyOxidizer. Warning To manage the python dependences for the python extension, do NOT use poetry add and poetry remove . Instead, use neutrapy add and neutrapy remove to add and remove python packages, so that they will be sync'ed to all the configuration files. If you accidentally use poetry add and poetry remove , neutrapy sync will lose those dependencies.","title":"Syncronizing the configurations"},{"location":"cli/#addingremoving-python-packages","text":"$ neutrapy add --help DESCRIPTION: Add a python dependency. USAGE: neutrapy add - LIST [ OPTIONS ] REQUIRED OPTIONS: POSITIONAL <LIST> - The names of the dependencies. OPTIONAL OPTIONS: -D, --dev [ BOOL ] - Add the dependencies to dev-dependencies. Default: False -E, --extras <LIST> - Extras to activate for the dependency. Default: [] --optional [ BOOL ] - Add the dependencies as optional. Default: False --pyver <STR> - Python version for which the dependency must be installed. Default: '' --platform <STR> - Platform for which the dependency must be installed. Default: '' --source <STR> - Name of the source to use for the dependency. Default: '' --allow-prereleases [ BOOL ] - Allow prereleases. Default: False --lock [ BOOL ] - Do not perform operations ( only update the lockfile ) . Default: False -h, --help - Print help information for this command $ neutrapy remove --help DESCRIPTION: Remove a python dependency. USAGE: neutrapy remove - LIST [OPTIONS] REQUIRED OPTIONS: POSITIONAL <LIST> - The names of the dependencies. OPTIONAL OPTIONS: -D, --dev [BOOL] - Remove the dependencies from dev-dependencies. Default: False -h, --help - Print help information for this command Note --pyver will be passed as --python to poetry add command.","title":"Adding/Removing python packages"},{"location":"cli/#running-the-application","text":"$ neutrapy run --help DESCRIPTION: Run current project. See also: https://neutralino.js.org/docs/cli/neu-cli/#neu-run USAGE: neutrapy run [ OPTIONS ] OPTIONAL OPTIONS: --disable-auto-reload [ BOOL ] - Disables the auto-reloading feature. Default: False --frontend-lib-dev [ BOOL ] - Enables both frontend library 's development environment and Neutralinojs' s development evironment at the same time. Default: False -- <LIST> - Sets additional CLI arguments for the Neutralinojs application process. Default: [] -h, --help - Print help information for this command This will simply call neu run to run the application.","title":"Running the application"},{"location":"cli/#building-the-application","text":"$ neutrapy build --help DESCRIPTION: Build the project. USAGE: neutrapy build [ OPTIONS ] OPTIONAL OPTIONS: --force [ BOOL ] - Do not check if we need to do ` neutrapy sync ` before building. Default: False -h, --help - Print help information for this command This will: Check if neutrapy sync is needed (if neutrapy.toml is modified since last neutrapy sync ) if --force is not passed Build the python extension using PyOxidizer Modify the neutralinojs.config.json to use the built python extension Build the Neutralinojs application using neu build Restore the neutralinojs.config.json Copy the built python extension to the app directory ( ./dist ) under backend Copy the neutrapy.toml to the app directory for the backend to use","title":"Building the application"},{"location":"extension/","text":"The python extension We need to do it in python, since the extension is written in python. We use websocket-client to implement this. Connecting to the server We need to enable exportAuthInfo in [neutralino] in neutrapy.toml to get connection information exported to .tmp/auth_info.json With this information, we can connect using: ws://127.0.0.1:<PORT>?extensionId=<EXTENSION_ID> websocket.WebSocketApp() accepts 4 handlers: on_open - called when the connection is established on_message - called when a message is received on_error - called when an error occurs on_close - called when the connection is closed With on_message , there are custom events, which are separated into different methods with utils.API class. Writing event handlers The available event handlers can be found in utils.API class. You can also subclass utils.API and pass it to WebSocketApp (see __main__.py ). This way you don't have to implement all the event handlers, but use the default ones from utils.API . Sending messages to the app You can send messages to the app using api.send() , which actually wraps websocket.send() , but the id and accessToken are automatically added to the message. See also: https://neutralino.js.org/docs/how-to/extensions-overview#sending-a-message-from-the-extension-to-app","title":"The python extension"},{"location":"extension/#the-python-extension","text":"We need to do it in python, since the extension is written in python. We use websocket-client to implement this.","title":"The python extension"},{"location":"extension/#connecting-to-the-server","text":"We need to enable exportAuthInfo in [neutralino] in neutrapy.toml to get connection information exported to .tmp/auth_info.json With this information, we can connect using: ws://127.0.0.1:<PORT>?extensionId=<EXTENSION_ID> websocket.WebSocketApp() accepts 4 handlers: on_open - called when the connection is established on_message - called when a message is received on_error - called when an error occurs on_close - called when the connection is closed With on_message , there are custom events, which are separated into different methods with utils.API class.","title":"Connecting to the server"},{"location":"extension/#writing-event-handlers","text":"The available event handlers can be found in utils.API class. You can also subclass utils.API and pass it to WebSocketApp (see __main__.py ). This way you don't have to implement all the event handlers, but use the default ones from utils.API .","title":"Writing event handlers"},{"location":"extension/#sending-messages-to-the-app","text":"You can send messages to the app using api.send() , which actually wraps websocket.send() , but the id and accessToken are automatically added to the message. See also: https://neutralino.js.org/docs/how-to/extensions-overview#sending-a-message-from-the-extension-to-app","title":"Sending messages to the app"},{"location":"links/","text":"Useful links Neutralinojs docs https://neutralino.js.org/docs/distribution/overview Websocket-client docs https://websocket-client.readthedocs.io/ Using frontend libraries https://neutralino.js.org/docs/how-to/use-a-frontend-library Code signing Code signing for python binary Code signing for the app","title":"Useful links"},{"location":"links/#useful-links","text":"","title":"Useful links"},{"location":"links/#neutralinojs-docs","text":"https://neutralino.js.org/docs/distribution/overview","title":"Neutralinojs docs"},{"location":"links/#websocket-client-docs","text":"https://websocket-client.readthedocs.io/","title":"Websocket-client docs"},{"location":"links/#using-frontend-libraries","text":"https://neutralino.js.org/docs/how-to/use-a-frontend-library","title":"Using frontend libraries"},{"location":"links/#code-signing","text":"Code signing for python binary Code signing for the app","title":"Code signing"}]}